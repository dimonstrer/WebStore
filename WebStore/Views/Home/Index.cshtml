@using WebStore.Models
@model IEnumerable<ProductModel>

@{
    ViewBag.Title = "Home Page";
}

<div align="center" class="body-content-product">
    @if (Model.Count() > 0)
    {
        foreach (ProductModel product in Model)
        {
            <div class="product-item">
                <img src="@Url.Action("Image", "Product", new { id = product.ProductId })" />
                <h3><a href="@Url.Action("Get","Product", new { id = product.ProductId})"> @product.Name </a></h3>
                @product.Description
                <h4>@product.Category</h4>
                <h4>@product.Price.ToString("c")</h4>
                <div id="@product.ProductId">
                    <button class="btn btn-info" type="button" onclick="hideButton(@product.ProductId)">В корзину</button>
                    <div class="cart-add-qnt">
                        <button class="btn-sm btn-info" onclick="toCart(@product.ProductId,'remove')">-</button>
                        <span>0</span>
                        <button class="btn-sm btn-info" onclick="toCart(@product.ProductId,'add')">+</button>
                    </div>
                </div>
            </div>
        }
    }
</div>

<script>
    async function toCart(id, type) {
        let url = '@Url.Action("UpdateCart", "Cart")?' + 'id=' + id + '&quantity=';
        let qntBlock = document.getElementById(id).getElementsByTagName('span')[0];
        if (type == 'add')
            url = url+ (+qntBlock.innerHTML+1);
        else if (type == 'remove')
            url = url+ + (+qntBlock.innerHTML-1);
        else
            alert('Error!');
        let response = await fetch(url, {
            method: 'POST'
        })
        let result = await response.json();;
        if (response.ok) {
            let qnt = qntBlock.innerHTML;
            if (type == 'add')
                qntBlock.innerHTML = +qnt + 1;
            if (type == 'remove')
                if (qnt > 1)
                    qntBlock.innerHTML = qnt - 1;
                else {
                    qntBlock.innerHTML = qnt - 1;
                    hideActions(id);
                }
            await getState();
        }
        else
            alert(result.message);
    }

    function hideCartBtn(id) {
        let btn = document.getElementById(id).childNodes[1];
        let div = document.getElementById(id).childNodes[3];
        btn.style.display = 'none';
        div.style.display = 'inline';
    }

    async function hideButton(id) {
        await toCart(id, 'add');
        hideCartBtn(id);
    }

    async function hideActions(id) {
        let btn = document.getElementById(id).childNodes[1];
        let div = document.getElementById(id).childNodes[3];
        btn.style.display = 'inline';
        div.style.display = 'none';
    }
</script>
</script>
