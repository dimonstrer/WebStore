@using WebStore.Models
@using WebStore.Helpers
@Styles.Render("~/Content/MySite.css")
@model ProductListViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = Model.PageInfo.CurrentCategory;
}

<body>
    <div class="category-list">

        @foreach (string cat in ViewBag.Categories)
        {
            if (cat == Model.PageInfo.CurrentCategory)
            {
                <a class="active" href="@Url.Action("List", new { category = cat})">@cat</a>
            }
            else
            {
                <a href="@Url.Action("List", new { category = cat})">@cat</a>
            }
        }
    </div>
    <div align="center" class="body-content-product">

        @if (Model.Products.Count() > 0)
        {
            <div class="product-get-manage">
                <button class="btn btn-success" onclick="handler()">Добавить</button>
            </div>
            foreach (ProductModel product in Model.Products)
            {
                <div class="product-item">
                    <img src="@Url.Action("Image", "Product", new { id = product.ProductId })" />
                    <h3><a href="@Url.Action("Get","Product", new { id = product.ProductId})"> @product.Name </a></h3>
                    @product.Description
                    <h4>@product.Category</h4>
                    <h4>@product.Price.ToString("c")</h4>
                    <div id="@product.ProductId">
                        <button class="btn btn-info" type="button" onclick="hideButton(@product.ProductId)">В корзину</button>
                        <div class="cart-add-qnt">
                            <button class="btn-sm btn-info" onclick="toCart(@product.ProductId,'remove')">-</button>
                            <span>0</span>
                            <button class="btn-sm btn-info" onclick="toCart(@product.ProductId,'add')">+</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <h3>There are no products yet. Would you like to <a href="@Url.Action("Add","Product")">add</a> one?</h3>
        }
    </div>
    <div align="center">
        <span class="btn-group">
            @Html.PageLinks(Model.PageInfo, x => Url.Action("List", new { category = Model.Products.First().Category, page = x }))
        </span>
    </div>
</body>

<script>
    function handler() {
        window.location.href = '@Url.Action("Add","Product")';
    }

    async function toCart(id, type) {
        let url = '@Url.Action("UpdateCart", "Cart")?' + 'id=' + id + '&quantity=';
        let qntBlock = document.getElementById(id).getElementsByTagName('span')[0];
        if (type == 'add')
            url = url+ (+qntBlock.innerHTML+1);
        else if (type == 'remove')
            url = url+ + (+qntBlock.innerHTML-1);
        else
            alert('Error!');
        let response = await fetch(url, {
            method: 'POST'
        })
        let result = await response.json();;
        if (response.ok) {
            let qnt = qntBlock.innerHTML;
            if (type == 'add')
                qntBlock.innerHTML = +qnt + 1;
            if (type == 'remove')
                if (qnt > 1)
                    qntBlock.innerHTML = qnt - 1;
                else {
                    qntBlock.innerHTML = qnt - 1;
                    hideActions(id);
                }
            await getState();
        }
        else
            alert(result.message);
    }

    function hideCartBtn(id) {
        let btn = document.getElementById(id).childNodes[1];
        let div = document.getElementById(id).childNodes[3];
        btn.style.display = 'none';
        div.style.display = 'inline';
    }

    async function hideButton(id) {
        await toCart(id, 'add');
        hideCartBtn(id);
    }

    async function hideActions(id) {
        let btn = document.getElementById(id).childNodes[1];
        let div = document.getElementById(id).childNodes[3];
        btn.style.display = 'inline';
        div.style.display = 'none';
    }
</script>